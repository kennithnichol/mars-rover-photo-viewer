{"version":3,"sources":["components/Logo/mars.svg","components/Logo/Logo.js","components/PhotoFinder/PhotoFinder.js","components/Photo/Photo.js","components/Photos/Photos.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Logo","react_default","a","createElement","className","src","mars","alt","height","PhotoFinder","_ref","onSolChange","onCameraChange","onButtonSubmit","maxSol","sol","onChange","value","type","max","onClick","Photo","concat","style","width","Photos","photos","overflowY","map","photo","index","components_Photo_Photo","key","initialState","camera","apiUrl","process","REACT_APP_API_URL","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","target","setState","state","fetch","method","headers","Content-Type","body","JSON","stringify","then","response","json","catch","console","log","_this$state","components_Logo_Logo","components_PhotoFinder_PhotoFinder","components_Photos_Photos","Component","Boolean","window","location","hostname","match","require","config","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.603419c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mars.09add0f5.svg\";","import React from 'react';\nimport mars from './mars.svg';\nimport './Logo.css';\n\nconst Logo = () => {\n    return (\n        <div className=\"ma4 mt0\">\n            <img src={mars} className=\"mt3\" alt=\"Line art of mars\" height=\"80\" />\n        </div>\n    );\n};\n\nexport default Logo;","import React from 'react';\n\nimport './PhotoFinder.css';\n\nconst PhotoFinder = ({ onSolChange, onCameraChange, onButtonSubmit, maxSol, sol }) => {\n    return(\n        <div className=\"\">\n            <p className=\"f3\">\n                { 'This will retreive 25 photos at a time from the NASA image library for the Mars Curiosity Rover' }\n            </p>\n            <div className=\"center\">\n                <div className=\"form flex-ns justify-center pa2 br3 shadow-5\">\n                    <select className=\"f4 w-100 w-33-ns pa2 ma2\" onChange={onCameraChange}>\n                        <option value=\"\">Any Camera</option>\n                        <option value=\"FHAZ\">Front Hazard Avoidance Camera</option>\n                        <option value=\"RHAZ\">Rear Hazard Avoidance Camera</option>\n                        <option value=\"MAST\">Mast Camera</option>\n                        <option value=\"CHEMCAM\">Chemistry and Camera Complex</option>\n                        <option value=\"MAHLI\">Mars Hand Lens Imager</option>\n                        <option value=\"MARDI\">Mars Descent Imager</option>\n                        <option value=\"NAVCAM\">Navigation Camera</option>\n                    </select>\n                    <label>Mars Sol [1-{maxSol}] <input type=\"number\" className=\"f4 pa2 w-100 w-33-ns ma2\" onChange={onSolChange} max={maxSol} value={sol} /></label>\n                    <button\n                        className=\"f4 w-100 w-33-ns grow link ph3 pv2 dib white bg-light-red ma2\"\n                        onClick={onButtonSubmit}\n                        >Get Photos</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default PhotoFinder;","import React from 'react';\n\nconst Photo = ({src}) => {\n    return (\n        <div className=\"photo tc bg-white pa1 dib br3 ma2 grow bw2 shadow-5\">\n            <img alt=\"\" src={`${src}`} style={{ width: 'auto', height: 250 }}/>\n        </div>\n    )\n}\n\nexport default Photo;","import React from 'react';\nimport Photo from '../Photo/Photo';\n\nimport './Photos.css';\n\nconst Photos = ({photos}) => {\n    return (\n        <div className=\"photos\" style={{ overflowY: 'scroll', height: 500 }}>\n            {\n\n                photos.map((photo, index) => (\n                    <Photo\n                        key={index}\n                        src={photo}\n                    />\n                ))\n            }\n        </div>\n    );\n}\n\nexport default Photos;","import React, { Component } from 'react';\nimport Logo from './components/Logo/Logo';\nimport PhotoFinder from './components/PhotoFinder/PhotoFinder';\nimport Photos from './components/Photos/Photos';\n\nimport './App.css';\n\nconst initialState = {\n  camera: null,\n  sol: 1,\n  maxSol: 2446,\n  photos: []\n}\n\nconst apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:3000';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = initialState;\n  }\n\n  onCameraChange = (event) => {\n    let camera = event.target.value;\n    if (false === camera) {\n      camera = null;\n    }\n    this.setState({camera: camera})\n  }\n\n  onSolChange = (event) => {\n    let sol = event.target.value;\n    if (sol > this.state.maxSol) {\n      sol = this.state.maxSol;\n    }\n    if (sol < 1) {\n      sol = 1;\n    }\n    this.setState({'sol': sol});\n  }\n\n  onButtonSubmit = (event) => {\n    fetch(`${apiUrl}/photos`,  {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        camera: this.state.camera,\n        sol: this.state.sol\n      })\n    })\n    .then(response => response.json())\n    .then(response => {\n      this.setState({photos: response});\n    })\n    .catch(console.log)\n  }\n\n  render() {\n    const {maxSol, sol, photos} = this.state\n    return (\n      <div className=\"App\">\n        <div className=\"flex flex-column\">\n          <Logo />\n          <PhotoFinder\n            apiUrl={apiUrl}\n            maxSol={maxSol}\n            sol={sol}\n            onSolChange={this.onSolChange}\n            onButtonSubmit={this.onButtonSubmit}\n            onCameraChange={this.onCameraChange} />\n            <Photos photos={photos} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'tachyons';\nimport './index.css';\n\nrequire('dotenv').config();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}