{"version":3,"sources":["components/Logo/mars.svg","components/Logo/Logo.js","components/PhotoFinder/PhotoFinder.js","components/Photo/Photo.js","components/Photos/Photos.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Logo","react_default","a","createElement","className","src","mars","alt","height","PhotoFinder","_ref","onSolChange","onCameraChange","onButtonSubmit","maxSol","sol","onChange","value","type","max","onClick","Photo","concat","style","width","Photos","photos","console","log","overflowY","map","photo","index","components_Photo_Photo","key","initialState","camera","apiUrl","process","REACT_APP_API_URL","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","target","setState","state","fetch","method","headers","Content-Type","body","JSON","stringify","then","response","json","catch","_this$state","components_Logo_Logo","components_PhotoFinder_PhotoFinder","components_Photos_Photos","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b7f9cb51.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mars.3def4fbb.svg\";","import React from 'react';\r\nimport mars from './mars.svg';\r\nimport './Logo.css';\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <div className=\"ma4 mt0\">\r\n            <img src={mars} className=\"mt3\" alt=\"Line art of mars\" height=\"80\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Logo;","import React from 'react';\r\n\r\nimport './PhotoFinder.css';\r\n\r\nconst PhotoFinder = ({ onSolChange, onCameraChange, onButtonSubmit, maxSol, sol }) => {\r\n    return(\r\n        <div>\r\n            <p className=\"f3\">\r\n                { 'This will retreive 25 photos at a time from the NASA image library for the Mars Curiosity Rover' }\r\n            </p>\r\n            <div className=\"center\">\r\n                <div className=\"form center pa4 br3 shadow-5\">\r\n                    <select className=\"f4 pa2 w-40 center\" onChange={onCameraChange}>\r\n                        <option value=\"\">Any Camera</option>\r\n                        <option value=\"FHAZ\">Front Hazard Avoidance Camera</option>\r\n                        <option value=\"RHAZ\">Rear Hazard Avoidance Camera</option>\r\n                        <option value=\"MAST\">Mast Camera</option>\r\n                        <option value=\"CHEMCAM\">Chemistry and Camera Complex</option>\r\n                        <option value=\"MAHLI\">Mars Hand Lens Imager</option>\r\n                        <option value=\"MARDI\">Mars Descent Imager</option>\r\n                        <option value=\"NAVCAM\">Navigation Camera</option>\r\n                    </select>\r\n                    <label>Mars Sol [1-{maxSol}] <input type=\"number\" className=\"f4 pa2 w-20 center\" onChange={onSolChange} max={maxSol} value={sol} /></label>\r\n                    <button\r\n                        className=\"w-30 grow f4 link ph3 pv2 dib white bg-light-red\"\r\n                        onClick={onButtonSubmit}\r\n                        >Get Photos</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PhotoFinder;","import React from 'react';\r\n\r\nconst Photo = ({src}) => {\r\n    return (\r\n        <div className=\"photo tc bg-white pa1 dib br3 ma2 grow bw2 shadow-5\">\r\n            <img alt=\"\" src={`${src}`} style={{ width: 'auto', height: 250 }}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Photo;","import React from 'react';\r\nimport Photo from '../Photo/Photo';\r\n\r\nimport './Photos.css';\r\n\r\nconst Photos = ({photos}) => {\r\n    console.log(photos);\r\n    return (\r\n        <div className=\"photos\" style={{ overflowY: 'scroll', height: 500 }}>\r\n            {\r\n\r\n                photos.map((photo, index) => (\r\n                    <Photo\r\n                        key={index}\r\n                        src={photo}\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Photos;","import React, { Component } from 'react';\r\nimport Logo from './components/Logo/Logo';\r\nimport PhotoFinder from './components/PhotoFinder/PhotoFinder';\r\nimport Photos from './components/Photos/Photos';\r\n\r\nimport './App.css';\r\n\r\nconst initialState = {\r\n  camera: null,\r\n  sol: 1,\r\n  maxSol: 2446,\r\n  photos: []\r\n}\r\n\r\nconst apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:3000';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = initialState;\r\n  }\r\n\r\n  onCameraChange = (event) => {\r\n    let camera = event.target.value;\r\n    if (false === camera) {\r\n      camera = null;\r\n    }\r\n    this.setState({camera: camera})\r\n  }\r\n\r\n  onSolChange = (event) => {\r\n    let sol = event.target.value;\r\n    if (sol > this.state.maxSol) {\r\n      sol = this.state.maxSol;\r\n    }\r\n    if (sol < 1) {\r\n      sol = 1;\r\n    }\r\n    this.setState({'sol': sol});\r\n  }\r\n\r\n  onButtonSubmit = (event) => {\r\n    fetch(`${apiUrl}/photos`,  {\r\n      method: 'post',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        camera: this.state.camera,\r\n        sol: this.state.sol\r\n      })\r\n    })\r\n    .then(response => response.json())\r\n    .then(response => {\r\n      this.setState({photos: response});\r\n    })\r\n    .catch(console.log)\r\n  }\r\n\r\n  render() {\r\n    const {maxSol, sol, photos} = this.state\r\n    return (\r\n      <div className=\"App\">\r\n        <div>\r\n          <Logo />\r\n          <PhotoFinder\r\n            apiUrl={apiUrl}\r\n            maxSol={maxSol}\r\n            sol={sol}\r\n            onSolChange={this.onSolChange}\r\n            onButtonSubmit={this.onButtonSubmit}\r\n            onCameraChange={this.onCameraChange} />\r\n            <Photos photos={photos} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'tachyons';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}